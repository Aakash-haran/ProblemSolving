public int countTriplets(int arr[]){
  int count = 0;
  int arrLen = arr.length;
  for(int i=0;i<arrLen; i++){
    for(int j=i+1;j<=arrLen;j++){
      for(k=j+1;j<=arrLen;k++){
        if(arr[i]+arr[j] ==arr[k]){
          count++
        }
      }
    }
  }
  return count;
}

// O(N^2) - time, O(N) -> space
static boolean find3Numbers(int A[], 
                                int arr_size, int sum) 
    { 
        // Fix the first element as A[i] 
        for (int i = 0; i < arr_size - 2; i++) { 
  
            // Find pair in subarray A[i+1..n-1] 
            // with sum equal to sum - A[i] 
            HashSet<Integer> s = new HashSet<Integer>(); 
            int curr_sum = sum - A[i]; 
            for (int j = i + 1; j < arr_size; j++)  
            { 
                if (s.contains(curr_sum - A[j]))  
                { 
                    System.out.printf("Triplet is %d,  
                                        %d, %d", A[i], 
                                      A[j], curr_sum - A[j]); 
                    return true; 
                } 
                s.add(A[j]); 
            } 
        } 
  
        // If we reach here, then no triplet was found 
        return false; 
    } 
